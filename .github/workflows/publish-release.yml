name: Publish Release

on:
  push:
    tags:
      - 'v*'  # Триггер на теги вида v1.2.3

permissions:
  contents: write                  
  packages: write                  

defaults:
  run:
    shell: bash

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  pack-and-publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: SharedKernel
            package-id: SharedService.SharedKernel
            path: src/SharedService.SharedKernel/SharedService.SharedKernel.csproj
            workdir: src/SharedService.SharedKernel
            description: "Базовые доменные классы, Error, Result-pattern, StyleCop конфигурация"
          - name: Core
            package-id: SharedService.Core
            path: src/SharedService.Core/SharedService.Core.csproj
            workdir: src/SharedService.Core
            description: "Интерфейсы Application слоя, CQRS, UnitOfWork, FluentValidation"
          - name: Framework
            package-id: SharedService.Framework
            path: src/SharedService.Framework/SharedService.Framework.csproj
            workdir: src/SharedService.Framework
            description: "ASP.NET Core extensions, Middleware, Swagger, HTTP Clients"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Extract version from tag
        id: ver
        run: echo "value=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Trace context
        run: |
          set -x
          dotnet --info
          echo "Actor=$GITHUB_ACTOR"
          echo "Repo=$GITHUB_REPOSITORY"
          echo "Ref=$GITHUB_REF"
          echo "Tag=$GITHUB_REF_NAME"
          echo "Version=${{ steps.ver.outputs.value }}"

      - name: Restore (solution-wide)
        run: |
          set -euxo pipefail
          dotnet restore

      - name: Build ${{ matrix.name }}
        run: |
          set -euxo pipefail
          dotnet build "${{ matrix.path }}" -c Release --no-restore

      - name: Pack ${{ matrix.name }}
        run: |
          set -euxo pipefail
          mkdir -p "${{ matrix.workdir }}/out"
          dotnet pack "${{ matrix.path }}" \
            -c Release --no-build \
            -o "${{ matrix.workdir }}/out" \
            -p:Version=${{ steps.ver.outputs.value }} \
            -p:ContinuousIntegrationBuild=true
          ls -la "${{ matrix.workdir }}/out"

      - name: Publish ${{ matrix.name }} to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          dotnet nuget push "${{ matrix.workdir }}/out/*.nupkg" \
            --api-key "$NUGET_AUTH_TOKEN" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --skip-duplicate

      - name: Upload package artifact (${{ matrix.name }})
        uses: actions/upload-artifact@v4
        with:
          name: nupkg-${{ matrix.name }}-${{ steps.ver.outputs.value }}
          path: ${{ matrix.workdir }}/out/*.nupkg
          if-no-files-found: error

  create-release:
    needs: pack-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: List downloaded artifacts (trace)
        run: |
          set -x
          tree -a ./dist || ls -R ./dist

      - name: Create GitHub Release and upload packages
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            dist/**/**/*.nupkg
